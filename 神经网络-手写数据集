# 学校 ； 南昌航空大学
# 姓名 ： 池吕庭
# 开发时间 ；2021/5/22 0022 9:58
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.io import loadmat   # 加载matlab数据
import matplotlib as mat
import scipy.optimize as opt   # 优化函数
from sklearn.metrics import classification_report  # 评价报告





def load_data_0(path, transpose=True):
    # 加载数据
    data = loadmat(path)
    y = data.get('y')   # (5000,1)
    # y = y.reshape(y.shape[0])  # 构造列向量
    X = data.get('X')   # (5000, 400)
    if transpose:
        # 原始数据对图像进行了翻转，需要转置回来
        X = np.array([im.reshape((20, 20)).T for im in X])
        # 再次将数据展平
        X = np.array([im.reshape(400) for im in X])
    return X, y

# data = loadmat('F:\\ML\\神经网络\\数据文件\\ex3data1.mat')
# X = data['X'] #一共5000个样本，每个样本是20*20像素的数字。20×20展开是400维的向量
# y = data['y']

X,y=load_data_0('F:\\ML\\神经网络\\数据文件\\ex3data1.mat')
def show_1_image(X):
    random_num=np.random.randint(0,5000)#5000张图随便选一张
    image=X[random_num,:]
    fig,ax=plt.subplots(figsize=(1,1))
    ax.matshow(image.reshape((20,20)),cmap='gray_r')
    plt.xticks([])  # 去掉坐标轴刻度，美观
    plt.yticks([])
    plt.show()
    print('this should be {}'.format(y[random_num]))

show_1_image(X)

def show_100_image(X):
    '''
    matplotlib.pyplot.subplots（nrows = 1，ncols = 1，sharex = False，sharey = False，squeeze = True，subplot_kw = None，gridspec_kw = None， fig_kw
    nrows，ncols,int类型，可选，默认值：1 子图网格的行数/列数。
    sharex，sharey ： 布尔或{‘none’，‘all’，‘row’，‘col’}，默认值：False
    squeeze 布尔值，可选，默认值：True 如果为True，则从返回的数组中挤出额外的尺寸Axes
    fig：返回 matplotlib.figure.Figure 对象
    ax：返回子图对象（ matplotlib.axes.Axes）或者是他的数组
    '''
    size=int(np.sqrt(X.shape[1]))
    #从5000行里面抽100行，为显示的100个图片
    sample_id=np.random.choice(np.arange(X.shape[0]),100)#组成100*400    np.arange函数返回一个有终点和起点的固定步长的排列
    images_100=X[sample_id,:]
    fig,ax=plt.subplots(ncols=10,nrows=10,sharey=True,sharex=True,figsize=(10,10))
    for rows in range(10):
        for cols in range(10):
            ax[rows,cols].matshow(images_100[10*rows+cols].reshape((size,size)),
            cmap='gray_r')
            plt.xticks(np.array([]))  # 设置x轴无标记
            plt.yticks(np.array([]))
    plt.show()
show_100_image(X)

print(X.shape)
print(y.shape)

def load_data(path):
    data = loadmat(path)
    X = data['X']
    y = data['y']
    return X,y
#初始化数据
X, y = load_data('F:\\ML\\神经网络\\数据文件\\ex3data1.mat')  #X等会要插入一组等于1的数组，用于计算Bias偏置
y = y.flatten()  #将y变成一维数组
#X要插入一组等于1的数组，用于计算Bias偏置
X = np.insert(X, 0, values=np.ones(X.shape[0]), axis=1)  #X是插入的数组，0是插入的位置，之后是插入的内容，axis是哪一个轴上对应的位置

#权重
def load_weight(path):
    data = loadmat(path)
    return data['Theta1'], data['Theta2']

theta1, theta2 = load_weight('F:\\ML\\神经网络\\数据文件\\ex3weights.mat')  #加载权重参数
#激活函数0，1
def sigmoid(z):
    return 1 / (1 + np.exp(- z))

#计算各层网络
a1=X.T
print(a1.shape)
a2=sigmoid(np.dot(theta1,a1))
a2=np.insert(a2,0,values=np.ones(a2.shape[1]),axis=0)
a3=sigmoid(np.dot(theta2,a2))
predict=np.argmax(a3,axis=0)+1  #argmaxs是返回沿轴axis最大值的索引。加1是因为索引是从0开始的
accuracy=np.mean(predict==y)
print(accuracy)
